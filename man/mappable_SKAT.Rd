% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mappable_SKAT.R
\name{mappable_SKAT}
\alias{mappable_SKAT}
\title{Obtain SKAT results, including permuted or empirical p-values, for a SNP
window or chunk of SNP windows}
\usage{
mappable_SKAT(
  pos_and_SNPs,
  window_size,
  scaffold_ID,
  null_model,
  n_permutations,
  resampling = FALSE,
  return_all_p_vals = FALSE,
  chunk = TRUE
)
}
\arguments{
\item{pos_and_SNPs}{A list containing SNP data divided into windows, along
with metadata (scaffold and SNP window center position) produced by
\code{\link{pre_allocate}}, and if passing chunks of windows rather than
individual windows to each worker, broken into chunks using
\code{\link{chunk_windows}}.}

\item{scaffold_ID}{Integer indicating the chromosome or scaffold of interest}

\item{null_model}{Object generated by \code{\link[SKAT]{SKAT_Null_Model}}}

\item{n_permutations}{Integer indicating the number of permutations used
to calculate empirical p-values}

\item{resampling}{If TRUE, will call \code{\link{calculate_SKAT_empirical_p}}
to calculate an empirical p-value or obtain a vector of permuted p-values.
If FALSE, will pass NA in place of an empirical p-value}

\item{chunk}{Should be TRUE if the list passed by `pos_and_SNPs` argument has
been processed into chunks by `chunk_windows()`, as is done in a standard
\code{\link{mtskat}} workflow}
}
\value{
A dataframe to be appended to results. If chunking (see above), this
  will contain multiple rows, one for each SNP window. Otherwise, it will
  contain a single row for one SNP window. Each row will contain a vector
  produced by \code{\link{SKAT_one_window}} (see documentation for that
  function for further details).
}
\description{
Obtain SKAT results, including permuted or empirical p-values, for a SNP
window or chunk of SNP windows
}
\examples{
mappable_SKAT(
  pos_and_SNPs = sample_pre_allocated_SNP_windows[[1]],
  scaffold_ID = sample_pre_allocated_SNP_windows[[1]][[3]],
  null_model = sample_null_model,
  resampling = TRUE,
  n_permutations = 1000,
  chunk = FALSE)


}
